- refonte spec
  - instrumenter ivr.node ns durant les tests node/types
- implement fetch external url
  - web request timeout / max body size

* State Machine

** ContextV1

- state

** SmartMatch

- *
  - session: call.session
  - context: call.contextV1
- callStatus:
  - ccapiCallStatus: route.params?
- dialStatus:
  - ccapiDialStatus: route.params?
- enterNode:
  - enterNodeParams: node.stats
  - ccapiCallbackParams: route.params?
- leaveNode:
  - callbackNodeParams: node.stats
  - ccapiCallbackParams: routes.params?

** States

*** Created

- enterNode: transferSda/List + sda -> TransferRinging
  - ringingSda <- enterNodeParams.sda
  - time <- context.time
- enterNode: transferList -> stop
- enterNode: transferQueue -> AcdTransferred
  - enterNodeParams.queueid
  - time <- context.time
- enterNode: * -> InProgress
  - time <- context.time
- callStatus: failed/canceled/completed -> call.delete

*** TransferRinging

- dialStatus: bridgestatus[in-progress] -> Transferred
  - sda <- context.ringingSda
- dialStatus: dialstatus[failed/no-answer/busy]
  - dialstatus <- ccapiDialStatus.dialstatus
  - dialcause <- ccapiDialStatus.dialcause
- callStatus: completed/canceled &&
  context.dialstatus === failed/no-answer/busy -> Terminated
  - cause <- IVR_HANG_UP
  - failedSda <- context.ringingSda
  - dialcause <- context.dialstatus
  - ccapi_dialcause <- context.dialcause
  - ccapi_cause <- ccapiCallStatus.cause
  - doActionEnd(IVR_HANG_UP)
- callStatus: canceled/completed + cause[user-hangup] -> Terminated[CALLER_HANG_UP]
  - cause <- CALLER_HANG_UP
  - ringingSda: context.ringingSda
  - doActionEnd(CALLER_HANG_UP)
- enterNode: transferSda/List + sda
- leaveNode: trasnferList + sda      -> TransferRinging
  - ringingSda <- enter/callbackNodeParams.sda
  - context.ringingSda
  - context.dialstatus
  - context.dialcause
- enterNode: transferQueue -> AcdTransferred
  - enterNodeParams.queueid
  - context.ringingSda
  - context.dialstatus
  - context.dialcause
- enterNode: * -> InProgress
  - context.ringingSda
  - context.dialstatus
  - context.dialcause

*** InProgress

- callStatus: canceled/completed + cause[user-hangup] -> Terminated[CALLER_HANG_UP]
  - doActionEnd(CALLER_HANG_UP)
- callStatus: canceled/completed -> Terminated[IVR_HANG_UP]
  - ccapi_cause <- ccapiCallStatus.cause
  - doActionEnd(CALLER_HANG_UP)
- enterNode: transferSda/List + sda -> TransferRinging
  - ringingSda <- enterNodeParams.sda
- enterNode: transferQueue -> AcdTransferred
  - enterNodeParams.queueid

*** Transferred

- dialStatus: dialstatus[completed]
  - if[ccapiDialStatus.record_id] persist record
  - bridgeduration <- ccapiDialStatus.bridgeduration
  - bridgecause <- ccapiDialStatus.bridgecause
- callStatus: completed -> Terminated
  - context.sda
  - context.bridgeduration <- ccapiDialStatus.bridgeduration
  - context.bridgecause <- ccapiDialStatus.bridgecause
  - doActionEnd()

- enter: increment limitManager context.sda
- leave: decrement limitManager context.sda

*** AcdTransferred

- leaveNode: overflowcause
  - overflow-cause <- callbackNodeParams.overflowcause
- enterNode: transferSda/List + sda -> TransferRinging
  - ringingSda <- enterNodeParams.sda
  - context.overflowcause
- enterNode: transferList -> stop
- enterNode: transferQueue -> stop
- enterNode: * -> InProgress
  - context.overflowcause
  - acdStatus()
- callStatus: completed + context.overflowcause + ccapiCallStatus.cause[xml-hangup] -> Terminated
  - ccapiCallStatus.cause
  - context.overflowcause
  - doActionEnd(IVR_HANG_UP)
  - acdStatus()
- callStatus: completed/canceled -> Terminated
  - doActionEnd()
  - acdStatus()

- acdStatus()
  - data:
    - session.callid/accountid
    - ccapiCallStatus.status/cause
    - nextState
    - newContext.time
  - POST call-id data

*** Terminated

- enter:
  - call.delete()
  - call.doOnEnd()

** Events

*** DialStatus

- TransferRinging: bridgestatus[in-progress] -> Transferred
  - sda <- context.ringingSda
- TransferRinging: dialstatus[failed/no-answer/busy]
  - dialstatus <- ccapiDialStatus.dialstatus
  - dialcause <- ccapiDialStatus.dialcause
- InProgress: dialstatus[completed]
  - if[ccapiDialStatus.record_id] persist record
  - bridgeduration <- ccapiDialStatus.bridgeduration
  - bridgecause <- ccapiDialStatus.bridgecause

*** CallStatus

- Created: failed/canceled/completed -> call.delete
- TransferRinging: completed/canceled &&
  context.dialstatus === failed/no-answer/busy -> Terminated
  - cause <- IVR_HANG_UP
  - failedSda <- context.ringingSda
  - dialcause <- context.dialstatus
  - ccapi_dialcause <- context.dialcause
  - ccapi_cause <- ccapiCallStatus.cause
  - doActionEnd(IVR_HANG_UP)
- TransferRinging: canceled/completed + cause[user-hangup] -> Terminated[CALLER_HANG_UP]
  - cause <- CALLER_HANG_UP
  - ringingSda: context.ringingSda
  - doActionEnd(CALLER_HANG_UP)
- InProgress: canceled/completed + cause[user-hangup] -> Terminated[CALLER_HANG_UP]
  - doActionEnd(CALLER_HANG_UP)
- InProgress: canceled/completed -> Terminated[IVR_HANG_UP]
  - ccapi_cause <- ccapiCallStatus.cause
  - doActionEnd(CALLER_HANG_UP)
- Transferred: completed -> Terminated
  - context.sda
  - context.bridgeduration <- ccapiDialStatus.bridgeduration
  - context.bridgecause <- ccapiDialStatus.bridgecause
  - doActionEnd()
- AcdTransferred: completed + context.overflowcause + ccapiCallStatus.cause[xml-hangup] -> Terminated
  - ccapiCallStatus.cause
  - context.overflowcause
  - doActionEnd(IVR_HANG_UP)
  - acdStatus()
- AcdTransferred: completed/canceled -> Terminated
  - doActionEnd()
  - acdStatus()

*** EnterNode TransferSda/List

- Created: transferSda/List + sda -> TransferRinging
  - ringingSda <- enterNodeParams.sda
  - time <- context.time
- Created: transferList -> stop
- TransferRinging: transferSda/List + sda      -> TransferRinging
  - ringingSda <- enter/callbackNodeParams.sda
  - context.ringingSda
  - context.dialstatus
  - context.dialcause
- InProgress: transferSda/List + sda -> TransferRinging
  - ringingSda <- enterNodeParams.sda
- AcdTransferred: transferSda/List + sda -> TransferRinging
  - ringingSda <- enterNodeParams.sda
  - context.overflowcause
- AcdTransferred: transferList -> stop

*** LeaveNode TransferList

- TransferRinging: transferList + sda      -> TransferRinging
  - ringingSda <- enter/callbackNodeParams.sda
  - context.ringingSda
  - context.dialstatus
  - context.dialcause

*** EnterNode TransferQueue

- Created: transferQueue -> AcdTransferred
  - enterNodeParams.queueid
  - time <- context.time
- TransferRinging: transferQueue -> AcdTransferred
  - enterNodeParams.queueid
  - context.ringingSda
  - context.dialstatus
  - context.dialcause
- InProgress: transferQueue -> AcdTransferred
  - enterNodeParams.queueid
- AcdTransferred: transferQueue -> stop

*** EnterNode *

- Created: * -> InProgress
  - time <- context.time
- TransferRinging: * -> InProgress
  - context.ringingSda
  - context.dialstatus
  - context.dialcause
- AcdTransferred: * -> InProgress
  - context.overflowcause
  - acdStatus()

** StateMachine

#+BEGIN_SRC plantuml :file doc/SM_full.png :exports results
@startuml

[*] --> Created
Created --> TransferRinging
note right on link
enterNode.transferSda/List[sda]
--
time: context.time
ringingSda: enterNodeParams.sda
end note
Created --> AcdTransferred
note right on link
enterNode.transferQueue
--
time: context.time
queueid: enterNodeParams.queueid
end note
Created --> InProgress
note right on link
enterNode.*
--
time: context.time
end note
Created --> Terminated
note right on link
callStatus.status[failed/canceled/completed]
end note

TransferRinging --> Transferred
note right on link
dialStatus.bridgestatus[in-progress]
--
sda: context.ringingSda
end note
TransferRinging --> Terminated
note right on link
callStatus.status[canceled/completed]
&& dialStatus.dialstatus[failed/no-answer/busy]
--
cause: IVR_HANG_UP
failedSda: context.ringingSda
dialcause: context.dialstatus
ccapi_dialcause: context.dialcause
ccapi_cause: callStatus.cause
--
doActionEnd(IVR_HANG_UP)
end note
TransferRinging --> Terminated
note right on link
callStatus.status[canceled/completed]
&& callStatus.cause[user-hangup]
--
cause: CALLER_HANG_UP
ringingSda: context.ringingSda
--
doActionEnd(CALLER_HANG_UP)
end note
TransferRinging --> TransferRinging
note right on link
enterNode.transferSda/List[sda]
|| leaveNode.transferList[sda]
--
ringingSda: nodeEnterParams.sda
failedSda: context.sda
dialcause: context.dialstatus
ccapi_dialcause: context.dialcause
end note
TransferRinging --> AcdTransferred
note right on link
enterNode.transferQueue
--
queueid: enterNodeParams.queueid
failedSda: context.sda
dialcause: context.dialstatus
ccapi_dialcause: context.dialcause
end note
TransferRinging --> InProgress
note right on link
enterNode.*
--
failedSda: context.sda
dialcause: context.dialstatus
ccapi_dialcause: context.dialcause
end note

InProgress --> Terminated
note right on link
callStatus.status[canceled/completed]
&& callStatus.cause[user-hangup]
--
cause: CALLER_HANGUP
--
doActionEnd(CALLER_HANG_UP)
end note
InProgress --> Terminated
note right on link
callStatus.status[canceled/completed]
--
cause: IVR_HANGUP
ccapi_cause: callStatus.cause
--
doActionEnd(IVR_HANG_UP)
end note
InProgress --> TransferRinging
note right on link
enterNode.transferSda/List[sda]
--
ringingSda: enterNodeParams.sda
end note
InProgress --> AcdTransferred
note right on link
enterNode transferQueue
--
queueid: enterNodeParams.queueid
end note

Transferred --> Terminated
note right on link
callStatus.status[completed]
--
sda: context.sda
bridgeduration: context.brideduration
bridgecause: context.bridgecause
end note
Transferred : enter() - limitManager.inc(context.sda)
Transferred : leave() - limitManager.dec(context.sda)

AcdTransferred --> TransferRinging
note right on link
enterNode.transferSda/List[sda]
--
acdcause: ACD_OVERFLOW
overflowcause: context.overflowcause
ringingSda: enterNodeParams.sda
--
acdStatus()
end note
AcdTransferred --> AcdTransferred
note right on link
enterNode.transferQueue
end note
AcdTransferred --> InProgress
note right on link
enterNode.*
--
acdcause: ACD_OVERFLOW
overflowcause: context.overflowcause
--
acdStatus()
end note
AcdTransferred --> Terminated
note right on link
callStatus.status[completed]
&& callStatus.cause[xml-hangup]
&& context.overflow_cause
--
acdcause: ACD_OVERFLOW
cause: IVR_HANG_UP
ccapi_cause: callStatus.cause
overflowcause: context.cause
--
doActionEnd(IVR_HANG_UP)
acdStatus()
end note
AcdTransferred --> Terminated
note right on link
callStatus.status[canceled/completed]
--
--
doActionEnd()
acdStatus()
end note

Terminated --> [*]
Terminated : enter() - call.delete() & call.doOnEnd()

@enduml
#+END_SRC

#+RESULTS:
[[file:doc/SM_full.png]]

#+BEGIN_SRC plantuml :file doc/SM_state.png :exports results
@startuml

[*] --> Created
Created --> TransferRinging
note right on link
enterNode.transferSda/List[sda]
end note
Created --> AcdTransferred
note right on link
enterNode.transferQueue
end note
Created --> InProgress
note right on link
enterNode.*
end note
Created --> Terminated
note right on link
callStatus.status[failed/canceled/completed]
end note

TransferRinging --> Transferred
note right on link
dialStatus.bridgestatus[in-progress]
end note
TransferRinging --> Terminated
note right on link
callStatus.status[canceled/completed]
end note
TransferRinging --> TransferRinging
note right on link
enterNode.transferSda/List[sda]
|| leaveNode.transferList[sda]
end note
TransferRinging --> AcdTransferred
note right on link
enterNode.transferQueue
end note
TransferRinging --> InProgress
note right on link
enterNode.*
end note

InProgress --> Terminated
note right on link
callStatus.status[canceled/completed]
end note
InProgress --> TransferRinging
note right on link
enterNode.transferSda/List[sda]
end note
InProgress --> AcdTransferred
note right on link
enterNode transferQueue
end note

Transferred --> Terminated
note right on link
callStatus.status[completed]
end note

AcdTransferred --> TransferRinging
note right on link
enterNode.transferSda/List[sda]
end note
AcdTransferred --> AcdTransferred
note right on link
enterNode.transferQueue
end note
AcdTransferred --> InProgress
note right on link
enterNode.*
end note
AcdTransferred --> Terminated
note right on link
callStatus.status[canceled/completed]
end note

Terminated --> [*]

@enduml
#+END_SRC

#+RESULTS:
[[file:doc/SM_state.png]]

#+BEGIN_SRC plantuml :file doc/SM_progress.png :exports results
@startuml

[*] --> Created

Created --> InProgress
note right on link
enterNode.*
end note

TransferRinging --> InProgress
note right on link
enterNode.*
end note

AcdTransferred --> InProgress
note right on link
enterNode.*
end note

@enduml
#+END_SRC

#+RESULTS:
[[file:doc/SM_progress.png]]

#+BEGIN_SRC plantuml :file doc/SM_acdtransferred.png :exports results
@startuml

[*] --> Created

Created --> AcdTransferred
note right on link
enterNode.transferQueue
end note

TransferRinging --> AcdTransferred
note right on link
enterNode.transferQueue
end note

InProgress --> AcdTransferred
note right on link
enterNode transferQueue
end note

AcdTransferred --> AcdTransferred
note right on link
enterNode.transferQueue
end note

@enduml
#+END_SRC

#+RESULTS:
[[file:doc/SM_acdtransferred.png]]

#+BEGIN_SRC plantuml :file doc/SM_transferringing.png :exports results
@startuml

[*] --> Created

Created --> TransferRinging
note right on link
enterNode.transferSda/List[sda]
end note

TransferRinging --> TransferRinging
note right on link
enterNode.transferSda/List[sda]
|| leaveNode.transferList[sda]
end note

InProgress --> TransferRinging
note right on link
enterNode.transferSda/List[sda]
end note

AcdTransferred --> TransferRinging
note right on link
enterNode.transferSda/List[sda]
end note

@enduml
#+END_SRC

#+RESULTS:
[[file:doc/SM_transferringing.png]]

#+BEGIN_SRC plantuml :file doc/SM_terminated.png :exports results
@startuml

[*] --> Created

Created --> Terminated
note right on link
callStatus.status[failed/canceled/completed]
end note

TransferRinging --> Terminated
note right on link
callStatus.status[canceled/completed]
end note

InProgress --> Terminated
note right on link
callStatus.status[canceled/completed]
end note

Transferred --> Terminated
note right on link
callStatus.status[completed]
end note

AcdTransferred --> Terminated
note right on link
callStatus.status[canceled/completed]
end note

Terminated --> [*]

@enduml
#+END_SRC

#+RESULTS:
[[file:doc/SM_terminated.png]]

